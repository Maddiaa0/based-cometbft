// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Test, console} from "forge-std/Test.sol";
import {SimpleProposer} from "../src/SimpleProposer.sol";

contract SimpleProposerTest is Test {
    SimpleProposer public sp;

    function setUp() public {
        sp = new SimpleProposer();
    }


    function testVerifyVrf() public {
        bytes memory proof = hex"0c69b0e731de406c7afb1137956d2cebb0e527ac88003496c2749406977f3b172f81539e937a81c553a90ed6905876b20d9e221c0e0c9e4ba61740ac66d64ebe21c6af1149ee14f8adb1e87b5f3f9a045d8d2b64a5238ba7baf23c32252b620e206e0e88e1562f3e7932929132e0c3226236b8037c29887983521d3c61e00b6c235496cd6bd40fd7c12af6a7dbfd1aa9d18471941ab7b460cc3251db1fb026322672cbeca01166621b00a464419548863bba08b69fe2fb5dc026a2a06eff85671ed3d4bceb9983e37ed3e5b4db4e528813785b50f1b32b9a7fdb80957b83fbbf10ac56f9deb19011628eb00bc2e3f0da93c48dc132dca92df06a7a1d86225c7623d61735a8e7cbbfa55190219ba326b9e23ac52c2a2765cf4ebe8421822244f52309c0691bf9d043ba0255dbcdd335081ed14b9c58794290c8857ce9cf86888d1a249d83c9c903c803e904fcd2960c099e1e57a584eaf56abea33626a2a340d50f8c72dd195a1d375b03d22153aa7c259f50a3d7b134a25a26980c5227d3160d1b54495b5110f3f450d1667a6d6fe87f9e27982e2a3344ab6f46c686409a72a1102871c418cd6b471940e25ab45bf451f7c56640bd966e62c2486e1042b89fd50c67255c2f428dd677768e9ab7c07fea3f1131eae76500fcbfa999c7b94a1b7b086f686b5b80f31eda65eb781945ebceb0ec79c0105e962d563b39e14e3d669e1015432a30b76043fba975ba804c4001bfffa2f2d2754b95ef290def69c9113d0204e664d1640fe8b3cc87917d54bac0892b84437ad4be24998a05fd6210cde8172d3f4d56670efb1b93068b4386cb18472d76f3557d9c258a8ad2c153e7dfb420a333aedd7a1b22a19d4a5092aae8e3094d806fc991366404df334a8bfd856f011f713eba649ecea64009a2772fb5ca90e4fe3d1428b046b96e04a60d34508c15e399c7d6f9146acfaf9028a517fddc5a94aeda2a10e8278b93c83e025ca3b40b31751c4f05bebc85341e2b6efa5e70f9191c15b07a26089f3f2be60e4b5864145cbca132a2d6e51e7da2d0c62e9650bc1654033075c600698c55c8b2c088070c8b11e0cf20b835cf345ce84567fc38ccdc3eaa5b75ab6b5534fc0eaee067452e91c974e4882f313e509c08e832b2746385cad947281f2b54bdf367f9304d242664025112a33c45ba7e306df8174319a3e9c8907f4fac76dd16593b6b8511f40e75470856c02b6892df839c1885d10148157de2bf4b632bcc2ae2d6a9facee30ae0ebb917fcaf47c18dcab074b70d5f7ff69a12be4ef44424f39f76861a72712afd50149854da214255d8361f9283193519c6371728d94a3cb1cbf7eb26661000860b0dc544fe50efe92602a872eaa9aff5bcf92258045a37eaebd93adeabff15787af7cf879a35d12dfc2506d9518d8f1cd636fc2ba675c01357399172ec2c0ec15d9a1ae20f35947a02a57f1c16122229e31a7726063ae6be8d06ae6d03460051b3fd7641aa6c25fbf99bf73c6c376e2c335ec919b2bb82837e0d96104adc14d77daf79c6b45dbd5f180353c7df94f023142aa64e81c972aeda22284a4edb2dbd737693b02c08eede38a9a7e0bbc3624e18ffe37d2571ee0ef2ee0c50566b17f7f4009aae4411d9c4f2b1e92cd5823f1c234ef03a771e2e8c6462b84906472a61aafffd861a45ab67da3c67d53e730348268c381442b07a5126737c6d8092033107e69e90a8397bd7c017a85c3a2a4dba01b3db00fb531922ec87dca2ec981589a1a17d87d8ab3e072b438a4fcd23ec8e29e21561e6ab779539943074c8261609ac8175cf93d422d49e85cc100ffcb3bad91ce4b8be2255880679fbb32eb62f492c9fb3255dd2f381f0f8029cd372cdc754cdd6660ccb1091af3371000d500d8c0080d04711a24e54851ba4206d97c5d39888e5f342e3a4edbc308f7d8cd408bfe5962a9f10a22d46cefd86e88235b81a66d1ac530c04c51f56bebdde18ab2989f60b66940fafba1310cd3cea830e4da5de3bdcaa3fea4c9fd966d8f159432ac2b070a73d81e0d36c0e437e9b6cc58f7dae4a16715c928f5e7f36fdf02d2202914681d7eabca1a98b03e5dc592ef49a17fc336da136c3418bf22790ad1a87192aee39aca696cacad2cb6a6c6c8dec65355d0386ff359775a0cd88ac44ec3f0bfef46a2d2b408a2953b44897b4ec0d84b002d522347d0feb9b479597033f0f03935d1cf72dccc16d4fcbd60e1b5b189f8c776f2d3289bc9d3790a41746f45705065f2d3fa4f888696592e2c6a4dedb4048f8ca5823e95f9ce03dc1bb086cf40f48e550154426a020f0670a776ba49b8c476571bfd020b1e1d598442cd73a8722c3bda1f4e916404f4b861f9f7aded90f51cbef542715fdf47c08ec512a3d420b76d0425a60d1cbe9f94b4198d163ed34bdd42456038d1a1b7ef7e72d69cd10266287e672b8c61b4ccf126f824e46c8ef9cbf6187de48d355ef534ba28958a926f469d97e15c643d6fe1fed9a84872e2e31b3bc69a73ec78783ac12699932642195624fee8beff8a5923fe50d12a4b57e435ef2cbfdc4cd124286f27a7f21fd0d7f01e42115b891f13818ea7fee748670563a9a1467706063fdd5e07aac604d1d8d8a18693af5c8cc176c8145da01f6be4d21c222991de0484a5f2bbbb5126a2fece93109f45f6acb0097107347cd0c747102fd9d99901dcd9c5baf1c12c5d8254266b1e3b7591ae77330989379604cd464ae4c2e6f02571345fc59ba4c95f0280c851558881c6f85e9acef291a4f35113137ecc221ea5ba4e95433cbc4d5b200f8e625f7877257da4d0d794ec3ff569181405fcf1583f439b6e2f18b9640f30a7c1bc423e490922d6d352c1669c5a1f512532cbe960c053877b622a02c03ce016c0efaec55b00605e688fc879e4bb6112d6dc9d7f4259517e2c3abd6ec9d1c14e6d1f9bc26dd37e2420ce42842a36b6c2ce09d2fefd0e8350e9b5af066e4201439d7e70e8a343744222db3b8fc841fecb131aff4919398b1071b633c8e1f7b";

        bytes32[] memory publicInputs = new bytes32[](2);
        publicInputs[0] = 0x000000000000000000000000f6a4953bf477b7fc35ce55b905707e84f1d4f6dc;
        publicInputs[1] = 0x02eac8aa991c665d9816feab281372f258359c707ce077a9ee80131691a2f9ed;

        sp.submitVRF(proof, publicInputs);

    }
}
